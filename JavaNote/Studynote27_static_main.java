public class Studynote27_static_main {
    public static void main(String[] args) {
        for (int i = 0; i < args.length; i++) {
            System.out.println("args[" + i + "] = " + args[i]);
        }
    }
}
/*
类变量/静态变量

类变量也叫静态变量/静态属性，是该类的所有对象共享的变量，任何一个该类的对象去访问它时，
取到的都是相同的值，同样任一个该类的对象去修改它时，修改的也是同一个变量。

static变量在jdk8以及以前，放在方法区的静态域；jdk8以后放在堆中（class对象），当你的类加载的时候会在堆生成一个类的class对象
●共识：
1）static变量由同一个类所有对象共享
2）在类加载的时候生成

●定义语法
访问修饰符 static 数据类型 变量名;//推荐
static 访问修饰符 数据类型 变量名;

●访问方式
类名.类变量名（推荐） 或者对象名.类变量名
【静态变量的访问修饰符的访问权限和范围和普通属性是一样的。】

●实用细节
1.什么时候需要用类变量
当我们需要让某个类的所有对象都共享一个变量时，就可以考虑使用类变量（静态变量）：比如：定义学生类，统计所有学生共交多少钱。Student（name，fee）
2.类变量与实例变量（普通属性）区别
类变量是该类的所有对象共享的，而实例变量是每个对象独享的。
3.加上static称为类变量或静态变量，否则称为实例变量/普通变量/非静态变量
4.类变量可以通过类名.类变量名或者对象名.类变量名来访问，但java设计者推荐
我们使用类名.类变量名方式访问。【前提是满足访问修饰符的访问权限和范围】
5.实例变量不能通过类名.类变量名方式访问
6.类变量是在类加载时就初始化了，也就是说，即使你没有创建对象，只要类加载了，就可以使用类变量了。
7.类变量的生命周期是随类的加载开始，随着类消亡而销毁。


构造器不是创建对象 是对对象进行初始化


 */

/*
类方法/静态方法
●基本形式
访问修饰符 static 数据返回类型 方法名() {};//推荐
static 访问修饰符 数据返回类型 方法名() {};

●类方法的调用：
使用方式：前提是满足访问修饰符的访问权限和范围
类名.类方法名 或者 对象名.类方法名

●类方法经典的使用场景
当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率
比如：工具类中的方法utils
Math类、Arrays类、Collections集合类看下源码：
小结
在程序员实际开发，往往会将一些通用的方法，设计成静态方法，这样我们不需要创建对象就可以使用
了，比如打印一维数组，冒泡排序，完成某个计算任务等

●使用细节
1）类方法和普通方法都是随看类的加载而加载，将结构信息存储在方法区：
类方法中无this的参数
普通方法中隐含着this的参数
2）类方法可以通过类名调用，也可以通过对象名调用。
3）普通方法和对象有关，需要通过对象名调用，比如 对象名.方法名（参数），不能通过类名调用。
4）类方法中不允许使用和对象有关的关键字，比如this和super。普通方法（成员方法）可以
//静态方法是早于对象在内存里创建的，如果使用this或super的话，会找不到这个对象
5）类方法（静态方法）中只能访问静态变量或静态方法。
6）普通成员方法，既可以访问普通变量（方法），也可以访问静态变量（方法）。

小结：静态方法，只能访问静态的成员，非静态的方法，可以访问静态成员和非静态成员
（必须遵守访问权限）


 */

/*
main方法


解释main方法的形式 ： public static void main(String[] args))
0.main()方法由java虚拟机调用，和main()方法不在同一个类
1.java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public
2.java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static
3.该方法接收String类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数，
4.java执行的程序：参数1 参数2 参数3

>特别提示：
1）在main()方法中，我们可以直接调用main方法所在类的静态方法或静态属性。
2）但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员
 */

class Main {
    private static String name = "静态属性 name";

    private int n1 = 10000; //非静态变量/属性无法被访问

    private static void hi(){
        System.out.println("静态方法 hi()");
    }

    private void hello(){
        System.out.println("非静态方法 hello()");
    }

    public static void main(String[] args) {
        //1.静态方法 main() 可以直接访问本类的静态成员
        System.out.println(name);
        hi();

        //2.静态方法 main() 不能直接访问本类的非静态成员
        //System.out.println(n1);
        //hello();

        //3.静态方法 main() 要访问非静态成员，需要先创建对象再调用
        Main main1 = new Main();
        System.out.println("非静态属性 n1 = " + main1.n1);
        main1.hello();
    }
}
